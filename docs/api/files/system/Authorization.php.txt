<?php
/**
 * Standard authorization for Strawberry PHP
 *
 * @package System
 * @author Carl-Johan Kihl
 * @since 2013-08-14 
 */
class Authorization {

    private $db;
    private static $instance;
    private $lang = array(
       
    );

    /**
     * Initialises the system, open db start session
     * @param type $connection
     */
    public static function init($connection) {

        //Load the i18n Dictionary
        addDictionary('user');
        
        if (self::$instance !== null) {
            throw new Exception("Authoriztion is already initialised");
        }

        require_once 'SecurityException.php';
        $session_name = 'sec_session_id'; // Set a custom session name
        $secure = false;
        $httponly = true; // This stops javascript being able to access the session id. 

        ini_set('session.use_only_cookies', 1); // Forces sessions to only use cookies. 
        $cookieParams = session_get_cookie_params(); // Gets current cookies params.
        session_set_cookie_params($cookieParams["lifetime"], $cookieParams["path"], $cookieParams["domain"], $secure, $httponly);
        session_name($session_name); // Sets the session name to the one set above.
        session_start(); // Start the php session
        session_regenerate_id(true); // regenerated the session, delete the old one.  
        $pdo = new PDO($connection);
        
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);
        self::$instance = new Authorization($pdo);
    }

    private function __construct(PDO $pdo) {
        $this->db = $pdo;
    }

    /**
     * @return Authorization singleton instance
     */
    public static function getInstance() {
        return self::$instance;
    }

    /**
     * Create tables
     */
    public function createTables() {
        $this->db->query('CREATE TABLE  IF NOT EXISTS "users" (
            "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ,
            "email" VARCHAR NOT NULL ,
            "password" VARCHAR NOT NULL ,
            "name" VARCHAR NOT NULL ,
            "created" DATETIME NOT NULL  DEFAULT (CURRENT_TIMESTAMP) , 
            "salt" VARCHAR NOT NULL ,
            "usergroup_id" INTEGER NOT NULL ,
            "locked" BOOL NOT NULL  DEFAULT false)')->execute();

        $this->db->query('CREATE TABLE  IF NOT EXISTS "usergroups" (
        "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ,
        "name" VARCHAR NOT NULL ,
        "child_id" VARCHAR)')->execute();

        $this->db->query('CREATE TABLE  IF NOT EXISTS "login_attempts" (
        "user_id" int NOT NULL,
        "time" VARCHAR NOT NULL)')->execute();

        echo "tables created";
    }

    /**
     * Login
     * @param string $email
     * @param string $password
     * @return numeric user id
     * @throws SecurityException
     */
    public function login($email, $password) {

        //Get user
        $stmt = $this->db->prepare("SELECT id,email,password,salt FROM users WHERE email LIKE ?");
        $stmt->execute(array($email));
        $user = $stmt->fetchObject();
        
        //Check email
        if (!$user)
            throw new SecurityException(i18n('login_invalid_email'));

        //Check brute force attack
        if ($this->is_bruteforce_attack($user->id)) {
            $this->lock_account($user->id);
            throw new SecurityException(i18n('account_attacked'));
        }
        
        //Get password hash
        $password = hash('sha512', $password . $user->salt);

        //Check password
        if ($user->password != $password) {
            // We record this attempt in the database
            $this->db->query("INSERT INTO login_attempts (user_id, time) VALUES ('$user->id', '" . time() . "')");
            throw new SecurityException(i18n('login_invalid_password'));
        }

        $ip_address = $_SERVER['REMOTE_ADDR']; // Get the IP address of the user. 
        $user_browser = $_SERVER['HTTP_USER_AGENT']; // Get the user-agent string of the user.

        $user->id = filter_var($user->id, FILTER_SANITIZE_NUMBER_INT); // XSS protection as we might print this value
        $_SESSION['user_id'] = $user->id;
        $email = filter_var($email, FILTER_SANITIZE_EMAIL); // XSS protection as we might print this value
        $_SESSION['email'] = $email;
        $_SESSION['login_string'] = hash('sha512', $password . $ip_address . $user_browser);

        return $user->id;
    }
    
    /**
     * Locks an account
     */
    private function lock_account($id) {
        //TODO to be implemented
    }

    /**
     * Check for brute force attatck
     * @param type $user_id
     * @return boolean
     */
    private function is_bruteforce_attack($user_id) {

        // Get timestamp of current time
        $now = time();
        // All login attempts are counted from the past 2 hours. 
        $valid_attempts = $now - (2 * 60 * 60);
        $stmt = $this->db->prepare("SELECT time FROM login_attempts WHERE user_id = ? AND time > '$valid_attempts'");

        // Execute the prepared query.
        $stmt->execute(array($user_id));

        // If there has been more than 5 failed logins
        if ($stmt->rowCount() > 7) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Authorizes the current login
     * @param type $group
     * @return boolean
     */
    public function authorize() {

        // Check if all session variables are set
        if (!isset($_SESSION['user_id'], $_SESSION['email'], $_SESSION['login_string'])) {
            return false;
        }

        //Get session variables
        $user_id = $_SESSION['user_id'];
        $login_string = $_SESSION['login_string'];
        
        $ip_address = $_SERVER['REMOTE_ADDR']; // Get the IP address of the user. 
        $user_browser = $_SERVER['HTTP_USER_AGENT']; // Get the user-agent string of the user.
        //Fetch password from db
        $stmt = $this->db->prepare("SELECT password FROM users WHERE id = ? LIMIT 1");
        $stmt->execute(array($user_id));
        $user = $stmt->fetchObject();
        if (!$user)
            return false;

        $password = $user->password;

        //Check security string
        $login_check = hash('sha512', $password . $ip_address . $user_browser);
        if ($login_check != $login_string)
            return false;

        return $user_id;
    }

    function logout() {
        // get session parameters 
        $params = session_get_cookie_params();

        // Delete the actual cookie.
        setcookie(session_name(), '', time() - 42000, $params["path"], $params["domain"], $params["secure"], $params["httponly"]);

        // Destroy session
        session_destroy();
    }

    function register($email, $password, $name, $usergroup_id) {

        // Create a random salt
        $salt = hash('sha512', uniqid(mt_rand(1, mt_getrandmax()), true));

        // Create salted and hashed password
        $password = hash('sha512', $password . $salt);

        // Add your insert to database script here. 
        $stmt = $this->db->prepare("INSERT INTO members (email, name, password, salt, usergroup_id) VALUES (?, ?, ?, ?,?)");
        $stmt->execute($email, $name, $password, $salt, $usergroup_id);
    }

}

?>

